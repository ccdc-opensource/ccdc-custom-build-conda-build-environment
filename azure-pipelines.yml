# Build on all three platforms
strategy:
  matrix:
    linux:
      imageName: 'ubuntu-latest'
      buildosname: 'linux'
      outputArchiveType: 'tar'
      outputArchiveExtension: 'tar.gz'
    mac:
      imageName: 'macos-latest'
      buildosname: 'macos'
      outputArchiveType: 'tar'
      outputArchiveExtension: 'tar.gz'
    windows:
      imageName: 'windows-2019'
      buildosname: 'windows'
      outputArchiveType: 'zip'
      outputArchiveExtension: 'zip'

pool:
  vmImage: $(imageName)

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.8'

- script: pip install -r requirements.txt
  displayName: 'Install requirements'

- task: PythonScript@0
  inputs:
    scriptSource: 'filePath' # Options: filePath, inline
    scriptPath: create_build_environment.py
    #arguments: # Optional
  displayName: 'Create miniconda build environment'

# Upload artifactory build info
- powershell: |
    $filename = Get-ChildItem -Path $(Build.ArtifactStagingDirectory) -Filter *.tar.gz | Select-Object -ExpandProperty Name
    Write-Host "Filename: $filename"
    if ($filename -match "conda_buildenv-(py[0-9]+)_") {
      $PythonVersion = $Matches[1]
      Write-Host "Python version: $PythonVersion"
      Write-Host "##vso[task.setvariable variable=PythonVersion]$PythonVersion"
    }
    else {
      Write-Error "Unable to extract Python version from filename"
    }
  displayName: 'Extract Python version and set upload path'

- task: ArtifactoryGenericUpload@2
  inputs:
    artifactoryService: 'devops-ccdc-3rd-party'
    specSource: 'taskConfiguration'
    fileSpec: |
      {
        "files": [
          {
            "pattern": "$(Build.ArtifactStagingDirectory)/conda_buildenv*.tar.gz",
            "target": "ccdc-3rdparty-python-interpreters/conda_buildenv/$(PythonVersion)/"
          }
        ]
      }
    replaceSpecVars: true
    collectBuildInfo: true
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)-$(buildosname)'
    module: 'conda_buildenv/$(buildosname)'
    includeEnvVars: true
    failNoOp: true
  displayName: 'Upload distribution to artifactory'

- task: ArtifactoryPublishBuildInfo@1
  inputs:
    artifactoryService: 'devops-ccdc-3rd-party'
    buildName: '$(Build.DefinitionName)'
    buildNumber: '$(Build.BuildNumber)-$(buildosname)'
    excludeEnvVars: '*password*;*secret*;*key*;*token*'
  displayName: 'Publish build'
